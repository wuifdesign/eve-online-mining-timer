{"version":3,"sources":["timer.js"],"names":["$","configData","sounds","sound-1","sound-2","sound-3","sound-4","sound-5","sound-6","sound-7","Vue","filter","value","minutes","Math","floor","seconds","round","toString","replace","data","number","substr","length","add","slice","read","val","write","isNaN","component","template","props","Object","current_ship","settings","yield_per_sec_m3","Number","remove-task","type","Function","required","add-cargo","turrets","turrets_select","running","select","interval","created","self","this","$on","stop","updateTurretData","watch","computed","ore_size","ore","size","total_ore_size","count","ore_per_sec","circles","yield_per_turret","isFinite","time","circle_time","methods","i","push","split_turrets","start","setInterval","oreCount","addCargo","task_sound","play","clearInterval","remove","removeTask","initApp","each","key","append","el","cargo","scanner_data","current_ship_index","ships","ships_list","cargo_limit","cargo_full_sound","tasks","localStorage","getItem","stored_ships","addEmptyShip","JSON","parse","ship_count","removeItem","setItem","validShips","ship","name","yield_per_sec","max_cargo","cargo_nearly_full","cargo_full","$broadcast","full_cargo_time","saveSettings","stringify","saveShips","removeShip","$remove","addEmptyTask","label","add_yield","playSound","sound","resetCargo","task","removeEmptyTasks","setTimeout","parseScannerData","result","scan_data","split","index","element","scanElement","elementPart","console","log","parseInt","toLowerCase","err","getJSON","jQuery"],"mappings":"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","file":"main.min.js","sourcesContent":["(function ($) {\r\n  'use strict';\r\n\r\n  var configData;\r\n\r\n  var sounds = {\r\n    'sound-1': 'Sound 1',\r\n    'sound-2': 'Sound 2',\r\n    'sound-3': 'Sound 3',\r\n    'sound-4': 'Sound 4',\r\n    'sound-5': 'Sound 5',\r\n    'sound-6': 'Sound 6',\r\n    'sound-7': 'Sound 7',\r\n  };\r\n\r\n  var parseScanResult = function (result) {\r\n    var scan_data = [];\r\n    $.each(result.split('\\n'), function (index, element) {\r\n      try {\r\n        var scanElement = {};\r\n        var elementPart = element.split('\\t');\r\n\r\n        if (elementPart.length !== 4) {\r\n          console.log('length not 4');\r\n          throw 'shorter 4';\r\n        }\r\n\r\n        scanElement.label = elementPart[0] + ' - ' + elementPart[3];\r\n        scanElement.count = parseInt(elementPart[1].replace(/\\u00a0/g, '').replace(' ', '').replace('.', '').replace(',', ''));\r\n\r\n        var type = elementPart[0].split(' ');\r\n        var ore;\r\n\r\n        if (type.length > 1) {\r\n          ore = type[1].toLowerCase();\r\n        } else {\r\n          ore = type[0].toLowerCase();\r\n        }\r\n\r\n        switch (ore) {\r\n          case 'ochre':\r\n            ore = 'dark ochre';\r\n            break;\r\n          case 'arisite':\r\n            ore = 'green arisite';\r\n            break;\r\n          case 'icicle':\r\n            ore = 'clear icicle';\r\n            break;\r\n          case 'glaze':\r\n            ore = 'white glaze';\r\n            break;\r\n          case 'ice':\r\n            ore = 'blue ice';\r\n            break;\r\n          case 'mass':\r\n            ore = 'glacial mass';\r\n            break;\r\n          case 'crust':\r\n            ore = 'glare crust';\r\n            break;\r\n          case 'glitter':\r\n            ore = 'dark glitter';\r\n            break;\r\n        }\r\n\r\n        scanElement.ore = ore;\r\n        scan_data.push(scanElement);\r\n      } catch (err) {\r\n      }\r\n    });\r\n    return scan_data;\r\n  };\r\n\r\n  Vue.filter('time', function (value) {\r\n    var minutes = Math.floor((value / 60));\r\n    var seconds = value - (minutes * 60);\r\n    if (minutes < 10) {\r\n      minutes = '0' + minutes;\r\n    }\r\n    if (seconds < 10) {\r\n      seconds = '0' + seconds;\r\n    }\r\n    return minutes + ':' + seconds;\r\n  });\r\n\r\n  Vue.filter('number', function (value) {\r\n    return Math.round(value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  });\r\n\r\n  Vue.filter('toFixed', function (value) {\r\n    var data = Math.round(value * 100).toString();\r\n    var number = data.substr(0, data.length - 2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n    var add = Math.round(data.slice(-2));\r\n    if (number === '') {\r\n      number = 0;\r\n    }\r\n    if (add < 10) {\r\n      add = '0' + add;\r\n    }\r\n    return number + '.' + add;\r\n  });\r\n\r\n  Vue.filter('round', {\r\n    read: function (val) {\r\n      return Math.round(val);\r\n    },\r\n    write: function (val) {\r\n      return isNaN(val) ? 0 : Math.round(val);\r\n    },\r\n  });\r\n\r\n  Vue.component('task-row', {\r\n    template: '#grid-template',\r\n    replace: true,\r\n    props: {\r\n      data: Object,\r\n      current_ship: Object,\r\n      settings: Object,\r\n      yield_per_sec_m3: Number,\r\n      'remove-task': {\r\n        type: Function,\r\n        required: true,\r\n      },\r\n      'add-cargo': {\r\n        type: Function,\r\n        required: true,\r\n      },\r\n    },\r\n    data: function () {\r\n      return {\r\n        turrets: 1,\r\n        turrets_select: [],\r\n        running: false,\r\n        select: configData['select'],\r\n        interval: null,\r\n      };\r\n    },\r\n    created: function () {\r\n      var self = this;\r\n      this.$on('stop-tasks', function () {\r\n        self.stop();\r\n      });\r\n      this.updateTurretData();\r\n    },\r\n    watch: {\r\n      current_ship: function () {\r\n        this.updateTurretData();\r\n      },\r\n    },\r\n    computed: {\r\n      ore_size: function () {\r\n        if (this.data.ore === '') {\r\n          return 0;\r\n        }\r\n        return configData.size[this.data.ore];\r\n      },\r\n      total_ore_size: function () {\r\n        if (isNaN(this.data.count)) {\r\n          return 0;\r\n        }\r\n        return Math.round(this.data.count * this.ore_size);\r\n      },\r\n      ore_per_sec: function () {\r\n        var yield_per_turret = this.yield_per_sec_m3 / this.ore_size / this.current_ship.turrets;\r\n        return yield_per_turret * this.turrets;\r\n      },\r\n      circles: function () {\r\n        var circles = this.total_ore_size / this.current_ship.yield_per_turret / this.turrets;\r\n        return isNaN(circles) || !isFinite(circles) ? 0 : circles;\r\n      },\r\n      time: function () {\r\n        var time = Math.round(this.circles * this.current_ship.circle_time);\r\n        return isNaN(time) ? 0 : time;\r\n      },\r\n    },\r\n    methods: {\r\n      updateTurretData: function () {\r\n        if (this.current_ship !== null) {\r\n          this.turrets_select = [];\r\n          for (var i = 1; i <= this.current_ship.turrets; i++) {\r\n            this.turrets_select.push(i);\r\n          }\r\n          if (this.current_ship.split_turrets) {\r\n            this.turrets = 1;\r\n          } else {\r\n            this.turrets = this.current_ship.turrets;\r\n          }\r\n        }\r\n\r\n      },\r\n      start: function () {\r\n        if (this.time <= 0) {\r\n          return;\r\n        }\r\n        var self = this;\r\n        this.interval = setInterval(function () {\r\n          var oreCount = self.ore_per_sec;\r\n          if (self.data.count < self.ore_per_sec) {\r\n            oreCount = self.data.count;\r\n          }\r\n          self.data.count -= self.ore_per_sec;\r\n          self.addCargo(oreCount * self.ore_size);\r\n          if (self.data.count <= 0) {\r\n            $('#' + self.settings.task_sound)[0].play();\r\n            self.data.count = 0;\r\n            self.stop();\r\n          }\r\n        }, 1000);\r\n        this.running = true;\r\n      },\r\n      stop: function () {\r\n        clearInterval(this.interval);\r\n        this.interval = null;\r\n        this.running = false;\r\n      },\r\n      remove: function () {\r\n        this.removeTask(this.data);\r\n      },\r\n    },\r\n  });\r\n\r\n  var initApp = function () {\r\n\r\n    $.each(sounds, function (key) {\r\n      $('#app-audio-holder').append('<audio id=\"' + key + '\" src=\"./assets/audio/' + key + '.mp3\"></audio>');\r\n    });\r\n\r\n    var miningApp = new Vue({\r\n      el: '#mining-app',\r\n      data: {\r\n        cargo: 0,\r\n        sounds: sounds,\r\n        scanner_data: '',\r\n        current_ship_index: null,\r\n        ships: [],\r\n        ships_list: [],\r\n        settings: {\r\n          cargo_limit: 95,\r\n          task_sound: 'sound-1',\r\n          cargo_full_sound: 'sound-1',\r\n        },\r\n        tasks: [],\r\n      },\r\n      created: function () {\r\n        this.current_ship_index = localStorage.getItem('current_ship_index');\r\n\r\n        var stored_ships = localStorage.getItem('ships');\r\n        if (stored_ships === null) {\r\n          this.addEmptyShip();\r\n        } else {\r\n          this.ships = JSON.parse(stored_ships);\r\n        }\r\n\r\n        var settings = localStorage.getItem('settings');\r\n        if (settings !== null) {\r\n          this.settings = JSON.parse(settings);\r\n        }\r\n      },\r\n      watch: {\r\n        ship_count: function (val) {\r\n          if (val > 0 && this.current_ship_index === null) {\r\n            this.current_ship_index = 0;\r\n          } else if (val === 0) {\r\n            this.current_ship_index = null;\r\n            localStorage.removeItem('current_ship_index');\r\n          }\r\n        },\r\n        current_ship_index: function (val) {\r\n          if (typeof val !== 'undefined') {\r\n            localStorage.setItem('current_ship_index', val);\r\n          }\r\n        },\r\n      },\r\n      computed: {\r\n        validShips: function () {\r\n          return this.ships.filter(function (ship) {\r\n            return ship.name !== '';\r\n          });\r\n        },\r\n        current_ship: function () {\r\n          var ship = this.ships[this.current_ship_index];\r\n          if (typeof ship === 'undefined') {\r\n            return {\r\n              name: '',\r\n              cargo: 0,\r\n              yield_per_turret: 0,\r\n              circle_time: 0,\r\n              turrets: 1,\r\n              split_turrets: false,\r\n            };\r\n          }\r\n          return ship;\r\n        },\r\n        ship_count: function () {\r\n          var count = 0;\r\n          $.each(this.ships, function (key, value) {\r\n            if (value.name !== '') {\r\n              count++;\r\n            }\r\n          });\r\n          return count;\r\n        },\r\n        yield_per_sec_m3: function () {\r\n          var yield_per_sec = (this.current_ship.yield_per_turret * this.current_ship.turrets) / this.current_ship.circle_time;\r\n          return isNaN(yield_per_sec) ? 0 : yield_per_sec;\r\n        },\r\n        max_cargo: function () {\r\n          return this.current_ship.cargo;\r\n        },\r\n        cargo_nearly_full: function () {\r\n          if (this.current_ship.cargo === 0) {\r\n            return false;\r\n          }\r\n          return this.cargo >= this.current_ship.cargo * (this.settings.cargo_limit / 100);\r\n        },\r\n        cargo_full: function () {\r\n          if (this.current_ship.cargo === 0) {\r\n            return false;\r\n          }\r\n          if (this.cargo >= this.current_ship.cargo) {\r\n            this.$broadcast('stop-tasks');\r\n            $('#' + this.settings.cargo_full_sound)[0].play();\r\n            return true;\r\n          }\r\n          return false;\r\n        },\r\n        full_cargo_time: function () {\r\n          var time = Math.round(this.current_ship.cargo / this.yield_per_sec_m3);\r\n          return isNaN(time) ? 0 : time;\r\n        },\r\n      },\r\n      methods: {\r\n        saveSettings: function () {\r\n          localStorage.setItem('settings', JSON.stringify(this.settings));\r\n        },\r\n        addEmptyShip: function () {\r\n          this.ships.push({\r\n            name: '',\r\n            cargo: 0,\r\n            yield_per_turret: 0,\r\n            circle_time: 0,\r\n            turrets: 1,\r\n          });\r\n        },\r\n        saveShips: function () {\r\n          localStorage.setItem('ships', JSON.stringify(this.ships));\r\n        },\r\n        removeShip: function (ship) {\r\n          this.ships.$remove(ship);\r\n          this.saveShips();\r\n        },\r\n        addEmptyTask: function () {\r\n          this.tasks.push({\r\n            label: '',\r\n            ore: 'veldspar',\r\n            count: 0,\r\n          });\r\n        },\r\n        addCargo: function (add_yield) {\r\n          this.cargo += add_yield;\r\n        },\r\n        playSound: function (sound) {\r\n          $('#' + sound)[0].play();\r\n        },\r\n        resetCargo: function () {\r\n          this.cargo = 0;\r\n        },\r\n        removeTask: function (task) {\r\n          this.tasks.$remove(task);\r\n        },\r\n        removeEmptyTasks: function () {\r\n          var self = this;\r\n          $.each(this.tasks, function (key, value) {\r\n            if (value.count === 0) {\r\n              setTimeout(function () {\r\n                self.tasks.$remove(value);\r\n              }, 0);\r\n            }\r\n          });\r\n        },\r\n        parseScannerData: function () {\r\n          var self = this;\r\n          setTimeout(function () {\r\n            var data = parseScanResult(self.scanner_data);\r\n            $.each(data, function (key, value) {\r\n              self.tasks.push({\r\n                label: value.label,\r\n                ore: value.ore,\r\n                count: value.count,\r\n              });\r\n            });\r\n            self.scanner_data = '';\r\n          }, 10);\r\n        },\r\n      },\r\n    });\r\n    miningApp.addEmptyTask();\r\n  };\r\n\r\n  $.getJSON('./assets/json/config.json', function (data) {\r\n    configData = data;\r\n    initApp();\r\n  });\r\n\r\n}(jQuery));\r\n"]}