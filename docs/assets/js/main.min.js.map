{"version":3,"sources":["timer.js"],"names":["$","configData","sounds","sound-1","sound-2","sound-3","sound-4","sound-5","sound-6","sound-7","parseScanResult","result","scan_data","each","split","index","element","scanElement","elementPart","console","log","length","label","count","parseInt","replace","ore","type","toLowerCase","push","err","Vue","filter","value","minutes","Math","floor","seconds","round","toString","data","number","substr","add","slice","read","val","write","oldVal","isNaN","component","template","props","Object","current_ship","settings","yield_per_sec_m3","Number","remove-task","Function","required","add-cargo","turrets","turrets_select","running","select","interval","created","self","this","$on","stop","updateTurretData","watch","computed","ore_size","size","total_ore_size","ore_per_sec","yield_per_turret","circles","isFinite","time","circle_time","methods","i","split_turrets","start","setInterval","oreCount","addCargo","task_sound","play","clearInterval","remove","removeTask","initApp","key","append","miningApp","el","cargo","scanner_data","current_ship_index","ships","ships_list","cargo_limit","cargo_full_sound","tasks","localStorage","getItem","stored_ships","addEmptyShip","JSON","parse","ship_count","removeItem","setItem","ship","name","yield_per_sec","max_cargo","cargo_nearly_full","cargo_full","$broadcast","full_cargo_time","saveSettings","stringify","saveShips","removeShip","$remove","addEmptyTask","add_yield","playSound","sound","resetCargo","task","removeEmptyTasks","setTimeout","parseScannerData","getJSON","jQuery"],"mappings":"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","file":"main.min.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    var configData;\n\n    var sounds = {\n        'sound-1': 'Sound 1',\n        'sound-2': 'Sound 2',\n        'sound-3': 'Sound 3',\n        'sound-4': 'Sound 4',\n        'sound-5': 'Sound 5',\n        'sound-6': 'Sound 6',\n        'sound-7': 'Sound 7'\n    };\n\n    var parseScanResult = function (result) {\n        var scan_data = [];\n        $.each(result.split('\\n'), function (index, element) {\n            try {\n                var scanElement = {};\n                var elementPart = element.split('\\t');\n\n                console.log(elementPart);\n\n                if (elementPart.length != 4) {\n                    console.log('length not 4');\n                    throw 'shorter 4';\n                }\n\n                scanElement.label = elementPart[0] + ' - ' + elementPart[3];\n                scanElement.count = parseInt(elementPart[1].replace(/\\u00a0/g, '').replace(' ', '').replace('.', '').replace(',', ''));\n\n                var type = elementPart[0].split(' ');\n                var ore;\n\n                if (type.length > 1) {\n                    ore = type[1].toLowerCase();\n                } else {\n                    ore = type[0].toLowerCase();\n                }\n\n                if (ore === 'ochre') {\n                    ore = 'dark ochre';\n                } else if (ore === 'arisite') {\n                    ore = 'green arisite';\n                }\n\n                scanElement.ore = ore;\n                scan_data.push(scanElement);\n            } catch (err) {\n            }\n        });\n        return scan_data;\n    };\n\n    Vue.filter('time', function (value) {\n        var minutes = Math.floor((value / 60));\n        var seconds = value - (minutes * 60);\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        return minutes + ':' + seconds;\n    });\n\n    Vue.filter('number', function (value) {\n        return Math.round(value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    });\n\n    Vue.filter('toFixed', function (value) {\n        var data = Math.round(value * 100).toString();\n        var number = data.substr(0, data.length-2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        var add = Math.round(data.slice(-2));\n        if(number === '') { number = 0; }\n        if(add < 10) { add = '0' + add; }\n        return number + '.' + add;\n    });\n\n    Vue.filter('round', {\n        read: function(val) {\n            return Math.round(val);\n        },\n        write: function(val, oldVal) {\n            return isNaN(val) ? 0 : Math.round(val);\n        }\n    });\n\n    Vue.component('task-row', {\n        template: '#grid-template',\n        replace: true,\n        props: {\n            data: Object,\n            current_ship: Object,\n            settings: Object,\n            yield_per_sec_m3: Number,\n            'remove-task': {\n                type: Function,\n                required: true\n            },\n            'add-cargo': {\n                type: Function,\n                required: true\n            }\n        },\n        data: function () {\n            return {\n                turrets: 1,\n                turrets_select: [],\n                running: false,\n                select: configData['select'],\n                interval: null\n            };\n        },\n        created: function () {\n            var self = this;\n            this.$on('stop-tasks', function() {\n                self.stop();\n            });\n            this.updateTurretData();\n        },\n        watch: {\n            current_ship: function(val) {\n                this.updateTurretData();\n            }\n        },\n        computed: {\n            ore_size: function () {\n                if (this.data.ore === '') {\n                    return 0;\n                }\n                return configData.size[this.data.ore];\n            },\n            total_ore_size: function () {\n                if (isNaN(this.data.count)) {\n                    return 0;\n                }\n                return Math.round(this.data.count * this.ore_size);\n            },\n            ore_per_sec: function () {\n                var yield_per_turret = this.yield_per_sec_m3 / this.ore_size / this.current_ship.turrets\n                return yield_per_turret * this.turrets;\n            },\n            circles: function () {\n                var circles = this.total_ore_size / this.current_ship.yield_per_turret / this.turrets;\n                return isNaN(circles) || !isFinite(circles) ? 0 : circles;\n            },\n            time: function () {\n                var time =  Math.round(this.circles * this.current_ship.circle_time);\n                return isNaN(time) ? 0 : time;\n            }\n        },\n        methods: {\n            updateTurretData: function () {\n                if(this.current_ship !== null) {\n                    this.turrets_select = [];\n                    for(var i = 1; i <= this.current_ship.turrets; i++) {\n                        this.turrets_select.push(i);\n                    }\n                    if(this.current_ship.split_turrets) {\n                        this.turrets = 1;\n                    } else {\n                        this.turrets = this.current_ship.turrets;\n                    }\n                }\n\n            },\n            start: function () {\n                if (this.time <= 0) {\n                    return;\n                }\n                var self = this;\n                this.interval = setInterval(function () {\n                    var oreCount = self.ore_per_sec;\n                    if (self.data.count < self.ore_per_sec) {\n                        oreCount = self.data.count;\n                    }\n                    self.data.count -= self.ore_per_sec;\n                    self.addCargo(oreCount * self.ore_size);\n                    if (self.data.count <= 0) {\n                        $('#' + self.settings.task_sound)[0].play();\n                        self.data.count = 0;\n                        self.stop();\n                    }\n                }, 1000);\n                this.running = true;\n            },\n            stop: function () {\n                clearInterval(this.interval);\n                this.interval = null;\n                this.running = false;\n            },\n            remove: function () {\n                this.removeTask(this.data);\n            }\n        }\n    });\n\n    var initApp = function () {\n\n        $.each(sounds, function(key, value) {\n            $('#app-audio-holder').append('<audio id=\"' + key + '\" src=\"./assets/audio/' + key + '.mp3\"></audio>');\n        });\n\n        var miningApp = new Vue({\n            el: '#mining-app',\n            data: {\n                cargo: 0,\n                sounds: sounds,\n                scanner_data: '',\n                current_ship_index: null,\n                ships: [],\n                ships_list: [],\n                settings: {\n                    cargo_limit: 95,\n                    task_sound: 'sound-1',\n                    cargo_full_sound: 'sound-1'\n                },\n                tasks: []\n            },\n            created: function () {\n                this.current_ship_index = localStorage.getItem('current_ship_index');\n\n                var stored_ships = localStorage.getItem('ships');\n                if (stored_ships === null) {\n                    this.addEmptyShip();\n                } else {\n                    this.ships = JSON.parse(stored_ships);\n                }\n\n                var settings = localStorage.getItem('settings');\n                if (settings !== null) {\n                    this.settings = JSON.parse(settings);\n                }\n            },\n            watch: {\n                ship_count: function (val) {\n                    if(val > 0 && this.current_ship_index === null) {\n                        this.current_ship_index = 0;\n                    } else if (val == 0) {\n                        this.current_ship_index = null;\n                        localStorage.removeItem('current_ship_index');\n                    }\n                },\n                current_ship_index: function (val) {\n                    if (typeof val !== 'undefined') {\n                        localStorage.setItem('current_ship_index', val);\n                    }\n                }\n            },\n            computed: {\n                current_ship: function () {\n                    var ship = this.ships[this.current_ship_index];\n                    if (typeof ship === 'undefined') {\n                        return {\n                            name: '',\n                            cargo: 0,\n                            yield_per_turret: 0,\n                            circle_time: 0,\n                            turrets: 1,\n                            split_turrets: false\n                        };\n                    }\n                    return ship;\n                },\n                ship_count: function () {\n                    var count = 0;\n                    $.each(this.ships, function(key, value) {\n                        if(value.name !== '') {\n                            count++;\n                        }\n                    });\n                    return count;\n                },\n                yield_per_sec_m3: function () {\n                    var yield_per_sec = (this.current_ship.yield_per_turret * this.current_ship.turrets) / this.current_ship.circle_time;\n                    return isNaN(yield_per_sec) ? 0 : yield_per_sec;\n                },\n                max_cargo: function () {\n                    return this.current_ship.cargo;\n                },\n                cargo_nearly_full: function () {\n                    if (this.current_ship.cargo === 0) {\n                        return false;\n                    }\n                    return this.cargo >= this.current_ship.cargo * (this.settings.cargo_limit / 100);\n                },\n                cargo_full: function () {\n                    if (this.current_ship.cargo === 0) {\n                        return false;\n                    }\n                    if(this.cargo >= this.current_ship.cargo) {\n                        this.$broadcast('stop-tasks');\n                        $('#' + this.settings.cargo_full_sound)[0].play();\n                        return true;\n                    }\n                    return false;\n                },\n                full_cargo_time: function () {\n                    var time = Math.round(this.current_ship.cargo / this.yield_per_sec_m3);\n                    return isNaN(time) ? 0 : time;\n                }\n            },\n            methods: {\n                saveSettings: function () {\n                    localStorage.setItem('settings', JSON.stringify(this.settings));\n                },\n                addEmptyShip: function () {\n                    this.ships.push({\n                        name: '',\n                        cargo: 0,\n                        yield_per_turret: 0,\n                        circle_time: 0,\n                        turrets: 1\n                    });\n                },\n                saveShips: function () {\n                    localStorage.setItem('ships', JSON.stringify(this.ships));\n                },\n                removeShip: function (ship) {\n                    this.ships.$remove(ship);\n                    this.saveShips();\n                },\n                addEmptyTask: function () {\n                    this.tasks.push({\n                        label: '',\n                        ore: 'veldspar',\n                        count: 0\n                    })\n                },\n                addCargo: function (add_yield) {\n                    this.cargo += add_yield;\n                },\n                playSound: function (sound) {\n                    $('#' + sound)[0].play();\n                },\n                resetCargo: function () {\n                    this.cargo = 0;\n                },\n                removeTask: function (task) {\n                    this.tasks.$remove(task);\n                },\n                removeEmptyTasks: function () {\n                    var self = this;\n                    $.each(this.tasks, function (key, value) {\n                        if (value.count === 0) {\n                            setTimeout(function() {\n                                self.tasks.$remove(value);\n                            }, 0);\n                        }\n                    });\n                },\n                parseScannerData: function () {\n                    var self = this;\n                    setTimeout(function () {\n                        var data = parseScanResult(self.scanner_data);\n                        $.each(data, function (key, value) {\n                            self.tasks.push({\n                                label: value.label,\n                                ore: value.ore,\n                                count: value.count\n                            });\n                        });\n                        self.scanner_data = '';\n                    }, 10);\n                }\n            }\n        });\n        miningApp.addEmptyTask();\n    };\n\n    $.getJSON('./assets/json/config.json', function (data) {\n        configData = data;\n        initApp();\n    });\n\n}(jQuery));\n"]}