{"version":3,"sources":["timer.js"],"names":["$","configData","sounds","sound-1","sound-2","sound-3","sound-4","sound-5","sound-6","sound-7","Vue","filter","value","minutes","Math","floor","seconds","round","toString","replace","data","number","substr","length","add","slice","read","val","write","isNaN","component","template","props","Object","current_ship","settings","yield_per_sec_m3","Number","remove-task","type","Function","required","add-cargo","add-ore","turrets","turrets_select","running","select","interval","created","self","this","$on","stop","updateTurretData","watch","computed","ore_size","ore","size","total_ore_size","count","ore_per_sec","circles","yield_per_turret","isFinite","time","circle_time","methods","i","push","split_turrets","start","setInterval","oreCount","addCargo","addOre","variant","task_sound","play","clearInterval","remove","removeTask","initApp","each","key","append","el","cargo","scanner_data","current_ship_index","ships","ships_list","cargo_limit","cargo_full_sound","tasks","ores","veldspar","Veldspar","ratio","Concentrated Veldspar","Dense Veldspar","Stable Veldspar","scordite","Scordite","Condensed Scordite","Massive Scordite","Glossy Scordite","pyroxeres","Pyroxeres","Solid Pyroxeres","Viscous Pyroxeres","Opulent Pyroxeres","plagioclase","Plagioclase","Azure Plagioclase","Rich Plagioclase","Sparkling Plagioclase","omber","Omber","Silvery Omber","Golden Omber","Platinoid Omber","kernite","Kernite","Luminous Kernite","Fiery Kernite","Resplendant Kernite","jaspet","Jaspet","Pure Jaspet","Pristine Jaspet","Immaculate Jaspet","hemorphite","Hemorphite","Vivid Hemorphite","Radiant Hemorphite","Scintillating Hemorphite","hedbergite","Hedbergite","Vitric Hedbergite","Glazed Hedbergite","Lustrous Hedbergite","gneiss","Gneiss","Iridescent Gneiss","Prismatic Gneiss","Brilliant Gneiss","dark ochre","Dark Ochre","Onyx Ochre","Obsidian Ochre","Jet Ochre","spodumain","Spodumain","Bright Spodumain","Gleaming Spodumain","Dazzling Spodumain","crokite","Crokite","Sharp Crokite","Crystalline Crokite","Pellucid Crokite","bistot","Bistot","Triclinic Bistot","Monoclinic Bistot","Cubic Bistot","arkonor","Arkonor","Crimson Arkonor","Prime Arkonor","Flawless Arkonor","mercoxit","Mercoxit","Magma Mercoxit","Vitreous Mercoxit","refine","tritanium","pyerite","mexallon","isogen","nocxium","zydrine","megacyte","morphite","refinery","reprocessingYield","reprocessingType","reprocessingFlat","reprocessingStation","reprocessingTax","skillProcessing","skillProcessingEfficiency","skillImplant","skillOres","localStorage","getItem","stored_ships","addEmptyShip","JSON","parse","ship_count","removeItem","setItem","validShips","ship","name","yield_per_sec","max_cargo","cargo_nearly_full","cargo_full","$broadcast","full_cargo_time","toFixed","parseFloat","saveSettings","stringify","saveRefinery","saveShips","removeShip","$remove","addEmptyTask","label","add_yield","oreType","oreVariant","oreYield","keys","addMinerals","oreRatio","oreRefine","refineryYield","refinerySkill","playSound","sound","resetCargo","task","removeEmptyTasks","setTimeout","clearSummary","oreTypes","oreVariants","j","clearRefine","oreTypeCheck","oreSummary","includes","oreVariantCheck","variantSummary","summaryType","summaryCount","oreCounts","variantCount","summaryVolume","oreSize","variantVolume","parseScannerData","result","scan_data","split","index","element","scanElement","elementPart","console","log","parseInt","toLowerCase","err","getJSON","jQuery"],"mappings":"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","file":"main.min.js","sourcesContent":["(function ($) {\n  'use strict';\n\n  var configData;\n\n  var sounds = {\n    'sound-1': 'Sound 1',\n    'sound-2': 'Sound 2',\n    'sound-3': 'Sound 3',\n    'sound-4': 'Sound 4',\n    'sound-5': 'Sound 5',\n    'sound-6': 'Sound 6',\n    'sound-7': 'Sound 7',\n  };\n\n  var parseScanResult = function (result) {\n    var scan_data = [];\n    $.each(result.split('\\n'), function (index, element) {\n      try {\n        var scanElement = {};\n        var elementPart = element.split('\\t');\n\n        if (elementPart.length !== 4) {\n          console.log('length not 4');\n          throw 'shorter 4';\n        }\n\n        scanElement.variant = elementPart[0];\n        scanElement.label = elementPart[0] + ' - ' + elementPart[3];\n        scanElement.count = parseInt(elementPart[1].replace(/\\u00a0/g, '').replace(' ', '').replace('.', '').replace(',', ''));\n\n        var type = elementPart[0].split(' ');\n        var ore;\n\n        if (type.length > 1) {\n          ore = type[1].toLowerCase();\n        } else {\n          ore = type[0].toLowerCase();\n        }\n\n        switch (ore) {\n          case 'ochre':\n            ore = 'dark ochre';\n            break;\n          case 'arisite':\n            ore = 'green arisite';\n            break;\n          case 'icicle':\n            ore = 'clear icicle';\n            break;\n          case 'glaze':\n            ore = 'white glaze';\n            break;\n          case 'ice':\n            ore = 'blue ice';\n            break;\n          case 'mass':\n            ore = 'glacial mass';\n            break;\n          case 'crust':\n            ore = 'glare crust';\n            break;\n          case 'glitter':\n            ore = 'dark glitter';\n            break;\n        }\n\n        scanElement.ore = ore;\n        scan_data.push(scanElement);\n      } catch (err) {\n      }\n    });\n    return scan_data;\n  };\n\n  Vue.filter('time', function (value) {\n    var minutes = Math.floor((value / 60));\n    var seconds = value - (minutes * 60);\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n    return minutes + ':' + seconds;\n  });\n\n  Vue.filter('number', function (value) {\n    return Math.round(value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  });\n\n  Vue.filter('toFixed', function (value) {\n    var data = Math.round(value * 100).toString();\n    var number = data.substr(0, data.length - 2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    var add = Math.round(data.slice(-2));\n    if (number === '') {\n      number = 0;\n    }\n    if (add < 10) {\n      add = '0' + add;\n    }\n    return number + '.' + add;\n  });\n\n  Vue.filter('round', {\n    read: function (val) {\n      return Math.round(val);\n    },\n    write: function (val) {\n      return isNaN(val) ? 0 : Math.round(val);\n    },\n  });\n\n  Vue.component('task-row', {\n    template: '#grid-template',\n    replace: true,\n    props: {\n      data: Object,\n      current_ship: Object,\n      settings: Object,\n      yield_per_sec_m3: Number,\n      'remove-task': {\n        type: Function,\n        required: true,\n      },\n      'add-cargo': {\n        type: Function,\n        required: true,\n      },\n      'add-ore': {\n        type: Function,\n        required: true\n      },\n    },\n    data: function () {\n      return {\n        turrets: 1,\n        turrets_select: [],\n        running: false,\n        select: configData['select'],\n        interval: null,\n      };\n    },\n    created: function () {\n      var self = this;\n      this.$on('stop-tasks', function () {\n        self.stop();\n      });\n      this.updateTurretData();\n    },\n    watch: {\n      current_ship: function () {\n        this.updateTurretData();\n      },\n    },\n    computed: {\n      ore_size: function () {\n        if (this.data.ore === '') {\n          return 0;\n        }\n        return configData.size[this.data.ore];\n      },\n      total_ore_size: function () {\n        if (isNaN(this.data.count)) {\n          return 0;\n        }\n        return Math.round(this.data.count * this.ore_size);\n      },\n      ore_per_sec: function () {\n        var yield_per_turret = this.yield_per_sec_m3 / this.ore_size / this.current_ship.turrets;\n        return yield_per_turret * this.turrets;\n      },\n      circles: function () {\n        var circles = this.total_ore_size / this.current_ship.yield_per_turret / this.turrets;\n        return isNaN(circles) || !isFinite(circles) ? 0 : circles;\n      },\n      time: function () {\n        var time = Math.round(this.circles * this.current_ship.circle_time);\n        return isNaN(time) ? 0 : time;\n      },\n    },\n    methods: {\n      updateTurretData: function () {\n        if (this.current_ship !== null) {\n          this.turrets_select = [];\n          for (var i = 1; i <= this.current_ship.turrets; i++) {\n            this.turrets_select.push(i);\n          }\n          if (this.current_ship.split_turrets) {\n            this.turrets = 1;\n          } else {\n            this.turrets = this.current_ship.turrets;\n          }\n        }\n\n      },\n      start: function () {\n        if (this.time <= 0) {\n          return;\n        }\n        var self = this;\n        this.interval = setInterval(function () {\n          var oreCount = self.ore_per_sec;\n          if (self.data.count < self.ore_per_sec) {\n            oreCount = self.data.count;\n          }\n          self.data.count -= self.ore_per_sec;\n          self.addCargo(oreCount * self.ore_size);\n          self.addOre(self.data.ore, self.data.variant, oreCount);\n          if (self.data.count <= 0) {\n            $('#' + self.settings.task_sound)[0].play();\n            self.data.count = 0;\n            self.stop();\n          }\n        }, 1000);\n        this.running = true;\n      },\n      stop: function () {\n        clearInterval(this.interval);\n        this.interval = null;\n        this.running = false;\n      },\n      remove: function () {\n        this.removeTask(this.data);\n      },\n    },\n  });\n\n  var initApp = function () {\n\n    $.each(sounds, function (key) {\n      $('#app-audio-holder').append('<audio id=\"' + key + '\" src=\"./assets/audio/' + key + '.mp3\"></audio>');\n    });\n\n    var miningApp = new Vue({\n      el: '#mining-app',\n      data: {\n        cargo: 0,\n        sounds: sounds,\n        scanner_data: '',\n        current_ship_index: null,\n        ships: [],\n        ships_list: [],\n        settings: {\n          cargo_limit: 95,\n          task_sound: 'sound-1',\n          cargo_full_sound: 'sound-1',\n        },\n        tasks: [],\n        ores: {\n          \"veldspar\": { \"Veldspar\": { count: 0, ratio: 1 }, \"Concentrated Veldspar\": { count: 0, ratio: 1.05 }, \"Dense Veldspar\": { count: 0, ratio: 1.1 }, \"Stable Veldspar\": { count: 0, ratio: 1.15 } },\n          \"scordite\": { \"Scordite\": { count: 0, ratio: 1 }, \"Condensed Scordite\": { count: 0, ratio: 1.05 }, \"Massive Scordite\": { count: 0, ratio: 1.1 }, \"Glossy Scordite\": { count: 0, ratio: 1.15 } },\n          \"pyroxeres\": { \"Pyroxeres\": { count: 0, ratio: 1 }, \"Solid Pyroxeres\": { count: 0, ratio: 1.05 }, \"Viscous Pyroxeres\": { count: 0, ratio: 1.1 }, \"Opulent Pyroxeres\": { count: 0, ratio: 1.15 } },\n          \"plagioclase\": { \"Plagioclase\": { count: 0, ratio: 1 }, \"Azure Plagioclase\": { count: 0, ratio: 1.05 }, \"Rich Plagioclase\": { count: 0, ratio: 1.1 }, \"Sparkling Plagioclase\": { count: 0, ratio: 1.15 } },\n          \"omber\": { \"Omber\": { count: 0, ratio: 1 }, \"Silvery Omber\": { count: 0, ratio: 1.05 }, \"Golden Omber\": { count: 0, ratio: 1.1 }, \"Platinoid Omber\": { count: 0, ratio: 1.15 } },\n          \"kernite\": { \"Kernite\": { count: 0, ratio: 1 }, \"Luminous Kernite\": { count: 0, ratio: 1.05 }, \"Fiery Kernite\": { count: 0, ratio: 1.1 }, \"Resplendant Kernite\": { count: 0, ratio: 1.15 } },\n          \"jaspet\": { \"Jaspet\": { count: 0, ratio: 1 }, \"Pure Jaspet\": { count: 0, ratio: 1.05 }, \"Pristine Jaspet\": { count: 0, ratio: 1.1 }, \"Immaculate Jaspet\": { count: 0, ratio: 1.15 } },\n          \"hemorphite\": { \"Hemorphite\": { count: 0, ratio: 1 }, \"Vivid Hemorphite\": { count: 0, ratio: 1.05 }, \"Radiant Hemorphite\": { count: 0, ratio: 1.1 }, \"Scintillating Hemorphite\": { count: 0, ratio: 1.15 } },\n          \"hedbergite\": { \"Hedbergite\": { count: 0, ratio: 1 }, \"Vitric Hedbergite\": { count: 0, ratio: 1.05 }, \"Glazed Hedbergite\": { count: 0, ratio: 1.1 }, \"Lustrous Hedbergite\": { count: 0, ratio: 1.15 } },\n          \"gneiss\": { \"Gneiss\": { count: 0, ratio: 1 }, \"Iridescent Gneiss\": { count: 0, ratio: 1.05 }, \"Prismatic Gneiss\": { count: 0, ratio: 1.1 }, \"Brilliant Gneiss\": { count: 0, ratio: 1.15 } },\n          \"dark ochre\": { \"Dark Ochre\": { count: 0, ratio: 1 }, \"Onyx Ochre\": { count: 0, ratio: 1.05 }, \"Obsidian Ochre\": { count: 0, ratio: 1.1 }, \"Jet Ochre\": { count: 0, ratio: 1.15 } },\n          \"spodumain\": { \"Spodumain\": { count: 0, ratio: 1 }, \"Bright Spodumain\": { count: 0, ratio: 1.05 }, \"Gleaming Spodumain\": { count: 0, ratio: 1.1 }, \"Dazzling Spodumain\": { count: 0, ratio: 1.15 } },\n          \"crokite\": { \"Crokite\": { count: 0, ratio: 1 }, \"Sharp Crokite\": { count: 0, ratio: 1.05 }, \"Crystalline Crokite\": { count: 0, ratio: 1.1 }, \"Pellucid Crokite\": { count: 0, ratio: 1.15 } },\n          \"bistot\": { \"Bistot\": { count: 0, ratio: 1 }, \"Triclinic Bistot\": { count: 0, ratio: 1.05 }, \"Monoclinic Bistot\": { count: 0, ratio: 1.1 }, \"Cubic Bistot\": { count: 0, ratio: 1.15 } },\n          \"arkonor\": { \"Arkonor\": { count: 0, ratio: 1 }, \"Crimson Arkonor\": { count: 0, ratio: 1.05 }, \"Prime Arkonor\": { count: 0, ratio: 1.1 }, \"Flawless Arkonor\": { count: 0, ratio: 1.15 } },\n          \"mercoxit\": { \"Mercoxit\": { count: 0, ratio: 1 }, \"Magma Mercoxit\": { count: 0, ratio: 1.05 }, \"Vitreous Mercoxit\": { count: 0, ratio: 1.1 } },\n        },\n        refine: {\n          \"tritanium\": 0,\n          \"pyerite\": 0,\n          \"mexallon\": 0,\n          \"isogen\": 0,\n          \"nocxium\": 0,\n          \"zydrine\": 0,\n          \"megacyte\": 0,\n          \"morphite\": 0\n        },\n        refinery: {\n          reprocessingYield: 0.5,\n          reprocessingType: true,\n          reprocessingFlat: 50,\n          reprocessingStation: 50,\n          reprocessingTax: 0,\n          skillProcessing: 5,\n          skillProcessingEfficiency: 5,\n          skillImplant: 0,\n          skillOres: {\n            \"veldspar\": 4,\n            \"scordite\": 4,\n            \"pyroxeres\": 4,\n            \"plagioclase\": 4,\n            \"omber\": 4,\n            \"kernite\": 4,\n            \"jaspet\": 4,\n            \"hemorphite\": 4,\n            \"hedbergite\": 4,\n            \"gneiss\": 4,\n            \"dark ochre\": 4,\n            \"spodumain\": 4,\n            \"crokite\": 4,\n            \"bistot\": 4,\n            \"arkonor\": 4,\n            \"mercoxit\": 4,\n          }\n        },\n      },\n      created: function () {\n        this.current_ship_index = localStorage.getItem('current_ship_index');\n\n        var stored_ships = localStorage.getItem('ships');\n        if (stored_ships === null) {\n          this.addEmptyShip();\n        } else {\n          this.ships = JSON.parse(stored_ships);\n        }\n\n        var settings = localStorage.getItem('settings');\n        if (settings !== null) {\n          this.settings = JSON.parse(settings);\n        }\n\n        var refinery = localStorage.getItem('refinery');\n        if (refinery !== null) {\n          this.refinery = JSON.parse(refinery);\n        }\n      },\n      watch: {\n        ship_count: function (val) {\n          if (val > 0 && this.current_ship_index === null) {\n            this.current_ship_index = 0;\n          } else if (val === 0) {\n            this.current_ship_index = null;\n            localStorage.removeItem('current_ship_index');\n          }\n        },\n        current_ship_index: function (val) {\n          if (typeof val !== 'undefined') {\n            localStorage.setItem('current_ship_index', val);\n          }\n        },\n      },\n      computed: {\n        validShips: function () {\n          return this.ships.filter(function (ship) {\n            return ship.name !== '';\n          });\n        },\n        current_ship: function () {\n          var ship = this.ships[this.current_ship_index];\n          if (typeof ship === 'undefined') {\n            return {\n              name: '',\n              cargo: 0,\n              yield_per_turret: 0,\n              circle_time: 0,\n              turrets: 1,\n              split_turrets: false,\n            };\n          }\n          return ship;\n        },\n        ship_count: function () {\n          var count = 0;\n          $.each(this.ships, function (key, value) {\n            if (value.name !== '') {\n              count++;\n            }\n          });\n          return count;\n        },\n        yield_per_sec_m3: function () {\n          var yield_per_sec = (this.current_ship.yield_per_turret * this.current_ship.turrets) / this.current_ship.circle_time;\n          return isNaN(yield_per_sec) ? 0 : yield_per_sec;\n        },\n        max_cargo: function () {\n          return this.current_ship.cargo;\n        },\n        cargo_nearly_full: function () {\n          if (this.current_ship.cargo === 0) {\n            return false;\n          }\n          return this.cargo >= this.current_ship.cargo * (this.settings.cargo_limit / 100);\n        },\n        cargo_full: function () {\n          if (this.current_ship.cargo === 0) {\n            return false;\n          }\n          if (this.cargo >= this.current_ship.cargo) {\n            this.$broadcast('stop-tasks');\n            $('#' + this.settings.cargo_full_sound)[0].play();\n            return true;\n          }\n          return false;\n        },\n        full_cargo_time: function () {\n          var time = Math.round(this.current_ship.cargo / this.yield_per_sec_m3);\n          return isNaN(time) ? 0 : time;\n        },\n        reprocessingYield: function() {\n          var reprocessingYield = 0.5;\n          if (this.refinery !== null) {\n            if (this.refinery.reprocessingType) {\n              reprocessingYield = (this.refinery.reprocessingStation / 100)\n                                * (1 + this.refinery.skillProcessing * 0.03)\n                                * (1 + this.refinery.skillProcessingEfficiency * 0.02)\n                                * (1 + this.refinery.skillImplant / 100);\n              this.refinery.reprocessingYield = reprocessingYield;\n              return ((reprocessingYield * (1 + 4 * 0.02)) * 100).toFixed(2);\n            } else if (this.refinery.reprocessingFlat && !isNaN(this.refinery.reprocessingFlat)) {\n              reprocessingYield = parseFloat(this.refinery.reprocessingFlat, 10).toFixed(2) / 100;\n            } else {\n            }\n          }\n\n          this.refinery.reprocessingYield = reprocessingYield;\n          return (reprocessingYield * 100).toFixed(2);\n        }\n      },\n      methods: {\n        saveSettings: function () {\n          localStorage.setItem('settings', JSON.stringify(this.settings));\n        },\n        saveRefinery: function () {\n          localStorage.setItem('refinery', JSON.stringify(this.refinery));\n        },\n        addEmptyShip: function () {\n          this.ships.push({\n            name: '',\n            cargo: 0,\n            yield_per_turret: 0,\n            circle_time: 0,\n            turrets: 1,\n          });\n        },\n        saveShips: function () {\n          localStorage.setItem('ships', JSON.stringify(this.ships));\n        },\n        removeShip: function (ship) {\n          this.ships.$remove(ship);\n          this.saveShips();\n        },\n        addEmptyTask: function () {\n          this.tasks.push({\n            label: '',\n            ore: 'veldspar',\n            count: 0,\n          });\n        },\n        addCargo: function (add_yield) {\n          this.cargo += add_yield;\n        },\n        addOre: function (oreType, oreVariant, oreYield) {\n          if (this.ores[oreType] && oreYield) {\n            if (!this.ores[oreType][oreVariant]) {\n              oreVariant = Object.keys(this.ores[oreType])[0];\n            }\n            this.ores[oreType][oreVariant].count += oreYield;\n            this.addMinerals(oreType, oreVariant, oreYield);\n          }\n        },\n        addMinerals: function(oreType, oreVariant, oreYield) {\n          var oreRatio = this.ores[oreType][oreVariant].ratio;\n          var oreRefine = configData.refine[oreType];\n          var refineryYield = this.refinery.reprocessingYield;\n          var refinerySkill = this.refinery.skillOres[oreType];\n\n          if (!refinerySkill) {\n            refineryYield = refineryYield * (1 + refinerySkill * 0.02);\n          }\n\n          this.refine.tritanium += oreYield * oreRatio * refineryYield * oreRefine.tritanium;\n          this.refine.pyerite += oreYield * oreRatio * refineryYield * oreRefine.pyerite;\n          this.refine.mexallon += oreYield * oreRatio * refineryYield * oreRefine.mexallon;\n          this.refine.isogen += oreYield * oreRatio * refineryYield * oreRefine.isogen;\n          this.refine.nocxium += oreYield * oreRatio * refineryYield * oreRefine.nocxium;\n          this.refine.zydrine += oreYield * oreRatio * refineryYield * oreRefine.zydrine;\n          this.refine.megacyte += oreYield * oreRatio * refineryYield * oreRefine.megacyte;\n          this.refine.morphite += oreYield * oreRatio * refineryYield * oreRefine.morphite;\n        },\n        playSound: function (sound) {\n          $('#' + sound)[0].play();\n        },\n        resetCargo: function () {\n          this.cargo = 0;\n        },\n        removeTask: function (task) {\n          this.tasks.$remove(task);\n        },\n        removeEmptyTasks: function () {\n          var self = this;\n          $.each(this.tasks, function (key, value) {\n            if (value.count === 0) {\n              setTimeout(function () {\n                self.tasks.$remove(value);\n              }, 0);\n            }\n          });\n        },\n        clearSummary: function () {\n          var oreTypes = Object.keys(this.ores);\n          for(var i = 0; i < oreTypes.length; i++) {\n            var oreVariants = Object.keys(this.ores[oreTypes[i]]);\n            for(var j = 0; j < oreVariants.length; j++) {\n              this.ores[oreTypes[i]][oreVariants[j]].count = 0;\n            }\n          }\n        },\n        clearRefine: function () {\n          this.refine.tritanium = 0;\n          this.refine.pyerite = 0;\n          this.refine.mexallon = 0;\n          this.refine.isogen = 0;\n          this.refine.nocxium = 0;\n          this.refine.zydrine = 0;\n          this.refine.megacyte = 0;\n          this.refine.morphite = 0;\n        },\n        oreTypeCheck: function(ores) {\n          var oreTypes = Object.keys(ores);\n          var oreSummary = [];\n          for (var i = 0; i < oreTypes.length; i++) {\n            var oreVariants = Object.keys(ores[oreTypes[i]]);\n            for (var j = 0; j < oreVariants.length; j++) {\n              if(ores[oreTypes[i]][oreVariants[j]].count !== 0 && !oreSummary.includes(oreTypes[i])) {\n                oreSummary.push(oreTypes[i]);\n              }\n            }\n          }\n          return oreSummary; // use oreTypes for testing\n        },\n        oreVariantCheck: function(oreType) {\n          var oreVariants = Object.keys(this.ores[oreType]);\n          var variantSummary = [];\n          for (var i = 0; i < oreVariants.length; i++) {\n            if(this.ores[oreType][oreVariants[i]].count !== 0 && !variantSummary.includes(oreVariants[i])) {\n              variantSummary.push(oreVariants[i]);\n            }\n          }\n          return variantSummary; // use oreVariants for testing\n        },\n        summaryType: function(oreType) {\n          var baseVariant = Object.keys(this.ores[oreType])[0];\n          return baseVariant;\n        },\n        summaryCount: function(oreType) {\n          var oreVariants = Object.keys(this.ores[oreType]);\n          var oreCounts = 0;\n          for (var i = 0; i < oreVariants.length; i++) {\n            oreCounts += this.ores[oreType][oreVariants[i]].count;\n          }\n          return oreCounts;\n        },\n        variantCount: function(oreType, oreVariant) {\n          var oreCount = this.ores[oreType][oreVariant].count;\n\n          if(!oreType || !oreVariant || isNaN(oreCount)) {\n            return 0;\n          } else {\n            return oreCount;\n          }\n        },\n        summaryVolume: function(oreType, summaryCount) {\n          var oreSize = configData.size[oreType];\n\n          if(!oreType || isNaN(summaryCount) || isNaN(oreSize)) {\n            return 0;\n          } else {\n            return Math.round(summaryCount * oreSize * 100) / 100;\n          }\n        },\n        variantVolume: function(oreType, oreVariant) {\n          var oreCount = this.ores[oreType][oreVariant].count;\n          var oreSize = configData.size[oreType];\n\n          if(!oreType || !oreVariant || isNaN(oreCount) || isNaN(oreSize)) {\n            return 0;\n          } else {\n            return Math.round(oreCount * oreSize * 100) / 100;\n          }\n        },\n        parseScannerData: function () {\n          var self = this;\n          setTimeout(function () {\n            var data = parseScanResult(self.scanner_data);\n            $.each(data, function (key, value) {\n              self.tasks.push({\n                label: value.label,\n                ore: value.ore,\n                count: value.count,\n                variant: value.variant,\n              });\n            });\n            self.scanner_data = '';\n          }, 10);\n        },\n      },\n    });\n    miningApp.addEmptyTask();\n  };\n\n  $.getJSON('./assets/json/config.json', function (data) {\n    configData = data;\n    initApp();\n  });\n\n}(jQuery));\n"]}